@page "/products2"
@using Mapster
@inject IApiClient _client

<MudDataGrid @ref="_table" T="ProductResponse" ServerData="ServerReload"
Loading="@_loading">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Product List</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
        AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Id" Title="Id" />
        <PropertyColumn Property="x => x.Name" />
        <PropertyColumn Property="x => x.Price" />
    </Columns>
    <PagerContent>
        <MudDataGridPager/>
    </PagerContent>
</MudDataGrid>

@code {
    private List<BrandResponse> _brands = new();
    private MudDataGrid<ProductResponse> _table = default!;

    private string searchString = "";
    private bool _loading;

    protected override async Task OnInitializedAsync()
    {
        await LoadBrandsAsync();
    }

    private async Task<GridData<ProductResponse>> ServerReload(GridState<ProductResponse> state)
    {
        try
        {
            _loading = true;
            var productFilter = new SearchProductsCommand
                {
                    PageSize = state.PageSize,
                    PageNumber = state.Page + 1,
                    AdvancedSearch = new()
                    {
                        Fields = new[] { "name" },
                        Keyword = searchString
                    }
                };
            productFilter.MinimumRate = Convert.ToDouble(SearchMinimumRate);
            productFilter.MaximumRate = Convert.ToDouble(SearchMaximumRate);
            productFilter.BrandId = SearchBrandId;
            var result = await _client.SearchProductsEndpointAsync("1", productFilter);

            return new GridData<ProductResponse>
                {
                    Items = result.Items ?? new List<ProductResponse>(),
                    TotalItems = result.TotalCount
                };
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            return new GridData<ProductResponse>
                {
                    Items = new List<ProductResponse>(),
                    TotalItems = 0
                };
        }
        finally
        {
            _loading = false;
        }
        
    }
    
    private Task OnSearch(string text)
    {
        searchString = text;
        return _table.ReloadServerData();
    }

    private async Task LoadBrandsAsync()
    {
        if (_brands.Count == 0)
        {
            var response = await _client.SearchBrandsEndpointAsync("1", new SearchBrandsCommand());
            if (response?.Items != null)
            {
                _brands = response.Items.ToList();
            }
        }
    }

    // Advanced Search

    private Guid? _searchBrandId;
    private Guid? SearchBrandId
    {
        get => _searchBrandId;
        set
        {
            _searchBrandId = value;
            _ = _table.ReloadServerData();
        }
    }

    private decimal _searchMinimumRate;
    private decimal SearchMinimumRate
    {
        get => _searchMinimumRate;
        set
        {
            _searchMinimumRate = value;
            _ = _table.ReloadServerData();
        }
    }

    private decimal _searchMaximumRate = 9999;
    private decimal SearchMaximumRate
    {
        get => _searchMaximumRate;
        set
        {
            _searchMaximumRate = value;
            _ = _table.ReloadServerData();
        }
    }
}
